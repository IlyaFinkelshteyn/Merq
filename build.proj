<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="All" InitialTargets="Configure" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<PropertyGroup>
		<Configuration Condition=" '$(Configuration)' == '' ">Release</Configuration>
		<IntermediateOutputPath>.nuget\</IntermediateOutputPath>
		<PackagesPath>$(IntermediateOutputPath)packages</PackagesPath>
		<Out Condition=" '$(Out)' == '' ">$(MSBuildThisFileDirectory)out</Out>
		<SkipReadGitCache Condition=" '$(SkipReadGitCache)' == '' ">true</SkipReadGitCache>
		<SkipWriteGitCache Condition=" '$(SkipWriteGitCache)' == '' ">true</SkipWriteGitCache>
		<CommonBuildProperties>WarningLevel=0;NoWarn=1591;RunCodeAnalysis=false;Configuration=$(Configuration);Out=$(Out);SkipReadGitCache=$(SkipReadGitCache);SkipWriteGitCache=$(SkipWriteGitCache)</CommonBuildProperties>
	</PropertyGroup>

	<ItemGroup>
		<Solution Include="src\*.sln"/>
		<TestProject Include="src\**\*Tests.csproj" />
	</ItemGroup>

	<Target Name="All" DependsOnTargets="Build;Test" />

	<Target Name="Clean">
		<MSBuild Projects="@(Solution)" Properties="$(CommonBuildProperties)" Targets="Clean" />
		<Exec Command="rmdir $(Out) /S /Q" ContinueOnError="true" />
		<Exec Command="rmdir $(PackagesPath) /S /Q" ContinueOnError="true" />
		<Exec Command="rmdir src\packages /S /Q" ContinueOnError="true" />
	</Target>

	<Target Name="Rebuild" DependsOnTargets="Clean;Build" />

	<Target Name="Build">
		<MSBuild Projects="@(Solution)" Properties="$(CommonBuildProperties)" />
		<Exec Command="$(PackagesPath)\gitlink\lib\net45\GitLink.exe . -f &quot;$([System.String]::new('%(Solution.FullPath)').Replace('$(MSBuildProjectDirectory)', '').TrimStart('\').TrimStart('/'))&quot; -u https://github.com/MobileEssentials/Merq -b &quot;$(GitBranch)&quot; -c &quot;$(Configuration)&quot;" />

		<ItemGroup>
			<CandidateNuSpec Include="src\**\*.nuspec" />
			<NonProjectNuSpec Include="@(CandidateNuSpec)"
							  Condition=" '%(Filename)' != 'Merq' And !Exists('%(RootDir)%(Directory)%(Filename).csproj') " />
		</ItemGroup>
	</Target>

	<Target Name="BuildPackages" AfterTargets="Build" Inputs="@(NonProjectNuSpec)" Outputs="%(NonProjectNuSpec.Identity)--BATCH"
			Condition="'@(NonProjectNuSpec)' != ''">
		<MSBuild Projects='$(PackagesPath)\GitInfo\build\GitInfo.targets'
				 Targets='GitVersion' Properties='GitInfoBaseDir=%(NonProjectNuSpec.RootDir)%(NonProjectNuSpec.Directory);SkipReadGitCache=$(SkipReadGitCache);SkipWriteGitCache=$(SkipWriteGitCache)'>
			<Output ItemName='GitVersion' TaskParameter='TargetOutputs'/>
		</MSBuild>

		<PropertyGroup>
			<Version>%(GitVersion.GitSemVerMajor).%(GitVersion.GitSemVerMinor).%(GitVersion.GitSemVerPatch)%(GitVersion.GitSemVerDashLabel)</Version>
			<IncludePreRelease>false</IncludePreRelease>
			<IncludePreRelease Condition=" '%(GitVersion.GitSemVerLabel)' != '' ">true</IncludePreRelease>
		</PropertyGroup>

		<Message Text="Determined version $(Version) for @(NonProjectNuSpec)" Importance="high"/>
		<Exec Command='"$(NuGet)" Pack "@(NonProjectNuSpec)" -Version $(Version) -Properties Id=%(NonProjectNuSpec.Filename);Configuration=$(Configuration);Version=$(Version) -OutputDirectory $(Out)' />
	</Target>

	<Target Name="FindPackages" AfterTargets="BuildPackages" DependsOnTargets="BuildPackages">
		<PropertyGroup>
			<PackageRegex>^(?&lt;id&gt;.+)\.(?&lt;version&gt;\d+\.\d+\.\d+)(?&lt;pre&gt;-.+)?$</PackageRegex>
		</PropertyGroup>
		<ItemGroup>
			<NuPackage Include="$(Out)\*.nupkg" />
			<NuPackage>
				<Id>$([System.Text.RegularExpressions.Regex]::Match('%(Filename)', $(PackageRegex)).Groups['id'].Value)</Id>
				<Version>$([System.Text.RegularExpressions.Regex]::Match('%(Filename)', $(PackageRegex)).Groups['version'].Value)</Version>
				<ReleaseLabel>$([System.Text.RegularExpressions.Regex]::Match('%(Filename)', $(PackageRegex)).Groups['pre'].Value)</ReleaseLabel>
			</NuPackage>
		</ItemGroup>
	</Target>

	<Target Name="DeletePackages" AfterTargets="FindPackages" DependsOnTargets="FindPackages"
			Inputs="@(NuPackage)" Outputs="%(NuPackage.Identity)-BATCH">
		<PropertyGroup>
			<PackageId>%(NuPackage.Id)</PackageId>
			<PackageId>$(PackageId.ToLowerInvariant())</PackageId>
			<PackageVersion>%(NuPackage.Version)%(NuPackage.ReleaseLabel)</PackageVersion>
			<PackageVersion>$(PackageVersion.ToLowerInvariant())</PackageVersion>
			<PackageUrl>https://api.nuget.org/v3/registration1/$(PackageId)/$(PackageVersion).json</PackageUrl>
		</PropertyGroup>

		<Exec Command="$(Curl) -s -0 -i -X HEAD $(PackageUrl)" IgnoreExitCode="true">
			<Output PropertyName="ExitCode" TaskParameter="ExitCode" />
		</Exec>

		<Message Importance="high" Condition=" '$(ExitCode)' == '0' "
				 Text="Package %(NuPackage.Id) version %(NuPackage.Version)%(NuPackage.ReleaseLabel) has already been published."/>
		<Message Importance="high" Condition=" '$(ExitCode)' == '22' " 
				 Text="Package %(NuPackage.Id) version %(NuPackage.Version)%(NuPackage.ReleaseLabel) has not been published before."/>

		<Delete Files="%(NuPackage.FullPath)" Condition=" '$(ExitCode)' == '0' " />
	</Target>

	<Target Name="PrepareMetaPackage" DependsOnTargets="DeletePackages">
		<ItemGroup>
			<EventsPackage Include="@(NuPackage)" Condition=" '%(Id)' == 'Merq.Events' " />
			<CommandsPackage Include="@(NuPackage)" Condition=" '%(Id)' == 'Merq.Commands' " />
		</ItemGroup>
		<PropertyGroup>
			<EventsVersion>@(EventsPackage -> '%(Version)%(ReleaseLabel)')</EventsVersion>
			<CommandsVersion>@(CommandsPackage -> '%(Version)%(ReleaseLabel)')</CommandsVersion>
		</PropertyGroup>
	</Target>

	<Target Name="BuildMetaPackage" DependsOnTargets="PrepareMetaPackage" Condition=" '$(EventsVersion)' != '' Or '$(CommandsVersion)' != '' ">
		<!-- There is at least a new Events or Commands package -->
		<Exec Command="$(Curl) -s -0 https://api.nuget.org/v3/registration1/merq.events/index.json" StandardOutputImportance="low" ConsoleToMSBuild="true">
			<Output TaskParameter="ConsoleOutput" PropertyName="JsonContent" />
		</Exec>
		<JsonPeek JsonContent="$(JsonContent)" JPath="items[0].upper">
			<Output TaskParameter="Result" PropertyName="PublishedEvents" />
		</JsonPeek>

		<Exec Command="$(Curl) -s -0 https://api.nuget.org/v3/registration1/merq.commands/index.json" StandardOutputImportance="low" ConsoleToMSBuild="true">
			<Output TaskParameter="ConsoleOutput" PropertyName="JsonContent" />
		</Exec>
		<JsonPeek JsonContent="$(JsonContent)" JPath="items[0].upper">
			<Output TaskParameter="Result" PropertyName="PublishedCommands" />
		</JsonPeek>

		<XmlPeek XmlInputPath="src\Merq.nuspec" Query="/package/metadata/version/text()">
			<Output TaskParameter="Result" PropertyName="BaseVersion" />
		</XmlPeek>

		<Exec Command="$(Curl) -s -0 https://api.nuget.org/v3/registration1/merq/index.json" StandardOutputImportance="low" ConsoleToMSBuild="true">
			<Output TaskParameter="ConsoleOutput" PropertyName="JsonContent" />
		</Exec>
		<JsonPeek JsonContent="$(JsonContent)" JPath="items[0].upper">
			<Output TaskParameter="Result" PropertyName="PublishedMeta" />
		</JsonPeek>

		<CalculateMetaVersion BaseVersion="$(BaseVersion)" PublishedVersion="$(PublishedMeta)">
			<Output TaskParameter="TargetVersion" PropertyName="TargetVersion" />
		</CalculateMetaVersion>

		<PropertyGroup>
			<EventsVersion Condition=" '$(EventsVersion)' == '' ">$(PublishedEvents)</EventsVersion>
			<CommandsVersion Condition=" '$(CommandsVersion)' == '' ">$(PublishedCommands)</CommandsVersion>
		</PropertyGroup>

		<Message Text="Determined new meta package version $(TargetVersion) with dependencies:
	Events: $(EventsVersion) (currently published version is $(PublishedEvents))
	Commands: $(CommandsVersion) (currently published version is $(PublishedCommands))" 
				 Importance="high" />
		
		<Exec Command='"$(NuGet)" Pack src\Merq.nuspec -Version $(TargetVersion) -Properties events=$(EventsVersion);commands=$(CommandsVersion) -OutputDirectory $(Out)' />
	</Target>

	<Import Project='$(PackagesPath)\MSBuilder.CodeTaskAssembly\build\MSBuilder.CodeTaskAssembly.props'/>
	<Import Project='$(PackagesPath)\JsonPoke.MSBuild\build\JsonPoke.MSBuild.Targets'/>
	<!--
	<Import Project='$(PackagesPath)\MSBuilder.CodeTaskAssembly\build\MSBuilder.CodeTaskAssembly.props'/>
	<Import Project='$(PackagesPath)\MSBuilder.DumpItems\build\MSBuilder.DumpItems.targets'/>
	-->
	
	<Target Name="Test" DependsOnTargets="TestWin;TestMac" />

	<Target Name="PrepareTest" DependsOnTargets="Build">
		<MSBuild Projects="@(TestProject)" BuildInParallel="false" Targets="GetTargetPath" Properties="$(CommonBuildProperties)">
			<Output TaskParameter="TargetOutputs" ItemName="_TestAssembly" />
		</MSBuild>

		<ItemGroup>
			<TestAssembly Include="@(_TestAssembly)" Condition=" Exists('%(_TestAssembly.FullPath)') " />
		</ItemGroup>

		<MakeDir Directories="$(Out)" Condition="!Exists('$(Out)')" />
	</Target>

	<Target Name="TestWin" DependsOnTargets="PrepareTest" Condition=" '$(OS)' == 'Windows_NT' ">
		<PropertyGroup>
			<XunitConsole>$(PackagesPath)\xunit.runner.console\tools\xunit.console.exe</XunitConsole>
			<XunitOptions>$(XunitOptions) -html $(Out)\test.html -xml $(Out)\test.xml -parallel all -noshadow</XunitOptions>

			<CoverageConsole>$(PackagesPath)\OpenCover\tools\OpenCover.Console.exe</CoverageConsole>
			<CoverageOptions>$(CoverageOptions) -output:$(Out)\coverage.xml -returntargetcode -register:user -filter:"+[Merq.*]* -[xunit*]* -[*.Tests]* -[*]*ThisAssembly* -[*]*IFluentInterface*" -excludebyattribute:*ExcludeFromCodeCoverage*;*CompilerGenerated* -skipautoprops -showunvisited -mergebyhash</CoverageOptions>
		</PropertyGroup>

		<Exec Command="$(CoverageConsole) $(CoverageOptions) -target:$(XunitConsole) -targetargs:&quot;@(TestAssembly, ' ') $(XunitOptions)&quot;"
			  ConsoleToMSBuild="true"
			  ContinueOnError="ErrorAndContinue" />
	</Target>

	<Target Name="TestMac" DependsOnTargets="PrepareTest" Condition=" '$(OS)' != 'Windows_NT' ">
		<xunit Assemblies="@(TestAssembly)"
			   Html="$(Out)\test.html"
			   Xml="$(Out)\test.xml"
			   ParallelizeAssemblies="true"
			   ParallelizeTestCollections="true"
			   ContinueOnError="ErrorAndContinue" />
	</Target>

	<UsingTask TaskName="CalculateMetaVersion" TaskFactory="CodeTaskFactory" AssemblyFile="$(CodeTaskAssembly)">
		<ParameterGroup>
			<BaseVersion Required="true" />
			<PublishedVersion Required="true" />
			<TargetVersion Output="true"/>
		</ParameterGroup>
		<Task>
			<Code Type="Fragment" Language="cs">
				<![CDATA[
				var label = BaseVersion.IndexOf("-") == -1 ? 
					"" : BaseVersion.Substring(BaseVersion.IndexOf("-"));
				
				var baseVersion = new Version(BaseVersion.Replace("-pre", ""));
				var publishedVersion = new Version(PublishedVersion.Replace("-pre", ""));
				
				if (baseVersion > publishedVersion) 
				{
					TargetVersion = BaseVersion;
				}
				else 
				{
					TargetVersion = new Version(publishedVersion.Major, publishedVersion.Minor, publishedVersion.Build + 1).ToString() + label;
				}
			]]></Code>
		</Task>
	</UsingTask>

	<!-- Configure and restore initial targets and packages -->
	<Import Project="src\NuGet.Restore.targets" />
	<PropertyGroup>
		<GitInfoTargets>$(PackagesPath)\GitInfo\build\GitInfo.targets</GitInfoTargets>
		<PendingRestore Condition=" !Exists('$(GitInfoTargets)') ">true</PendingRestore>
	</PropertyGroup>

	<Target Name="Configure" DependsOnTargets="DownloadNuGet">
		<!-- We always run NuGet Install since it already checks for already-installed packages and skips them -->
		<Exec Command='"$(NuGet)" Install "$(MSBuildThisFileDirectory)packages.config" -OutputDirectory "$(PackagesPath)" -ExcludeVersion'
			  Condition=" '$(PendingRestore)' == 'true' " />

		<!-- Errors if nuget packages were restored during the build -->
		<Error Text="Required build-time NuGet packages were missing and were just restored. Please run the build again."
			   Condition=" '$(PendingRestore)' == 'true' And '$(target)' != 'configure' "/>
	</Target>
</Project>
