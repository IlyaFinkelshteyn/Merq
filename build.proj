<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="All" InitialTargets="Configure" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<PropertyGroup>
		<Configuration Condition=" '$(Configuration)' == '' ">Release</Configuration>
		<IntermediateOutputPath>.nuget\</IntermediateOutputPath>
		<PackagesPath>$(IntermediateOutputPath)packages</PackagesPath>
		<Out Condition=" '$(Out)' == '' ">$(MSBuildThisFileDirectory)out</Out>
		<!-- We always use DeployExtension=false from the build script to ensure a clean build, but 
			 also because if we run integration tests, we do so by installing the resulting VSIX, 
			 which makes for a cleaner test too. 	-->
		<CommonBuildProperties>WarningLevel=0;NoWarn=1591;RunCodeAnalysis=false;Configuration=$(Configuration);Out=$(Out);DeployExtension=false</CommonBuildProperties>
		<DefaultImportance Condition=" '$(DefaultImportance)' == '' ">high</DefaultImportance>
	</PropertyGroup>
	
	<!-- Integration-test related stuff -->
	<PropertyGroup>
		<_RootSuffix>$(RootSuffix)</_RootSuffix>
		<_RootSuffix Condition=" '$(_RootSuffix)' == '' ">Exp</_RootSuffix>
		<_RootSuffix Condition=" '$(_RootSuffix)' == '.' "></_RootSuffix>
		<IntegrationTest Condition=" '$(IntegrationTest)' == '' ">true</IntegrationTest>
		<Installer>$(MSBuildThisFileDirectory)src\Vsix\Merq.Vsix\bin\$(Configuration)\Merq.vsix</Installer>
	</PropertyGroup>
	
	<ItemGroup>
		<Solution Include="src\*.sln"/>
		<TestProject Include="src\**\*.Tests.csproj" />
		<IntegrationTestProject Include="src\**\*.IntegrationTests.csproj" />
	</ItemGroup>

	<Target Name="All" DependsOnTargets="Build;Test;Package" />

	<Target Name="Clean">
		<MSBuild Projects="@(Solution)" Properties="$(CommonBuildProperties)" Targets="Clean" />
		<Exec Command="rmdir $(Out) /S /Q" ContinueOnError="true" />
		<Exec Command="rmdir $(PackagesPath) /S /Q" ContinueOnError="true" />
		<Exec Command="rmdir src\packages /S /Q" ContinueOnError="true" />
	</Target>

	<Target Name="Rebuild" DependsOnTargets="Clean;Build" />

	<Target Name="Build">
		<Exec Command="rmdir $(Out) /S /Q" ContinueOnError="true" />
		<Message Text="Build properties: $(CommonBuildProperties)" Importance="high" />
		<MSBuild Projects="@(Solution)" Properties="$(CommonBuildProperties)" />

		<ItemGroup>
			<NuSpec Include="src\**\*.nuspec" />
		</ItemGroup>
	</Target>

	<Target Name="Package" DependsOnTargets="BuildInstaller;BuildPackages" />

	<Target Name="BuildInstaller">
		<!-- Refresh the VSIX with the SystemComponent flag now for redistribution -->
		<Message Importance="$(DefaultImportance)" Text="Refreshing VSIX with IsSystemComponent=true" />
		<Exec Command="rmdir src\Vsix\Merq.Vsix\bin\$(Configuration) /S /Q" ContinueOnError="true" />
		<Exec Command="rmdir src\Vsix\Merq.Vsix\obj\$(Configuration) /S /Q" ContinueOnError="true" />

		<Exec Command="rmdir $(Out) /S /Q" ContinueOnError="true" />
		<MSBuild Projects="@(Solution)" Properties="$(CommonBuildProperties);IsSystemComponent=true" />
		<Exec Command="$(PackagesPath)\gitlink\lib\net45\GitLink.exe . -f &quot;$([System.String]::new('%(Solution.FullPath)').Replace('$(MSBuildProjectDirectory)', '').TrimStart('\').TrimStart('/'))&quot; -u https://github.com/MobileEssentials/Merq -b &quot;$(GitBranch)&quot; -c &quot;$(Configuration)&quot;" />

		<MSBuild Projects="src\Installers\Merq.Installer\Merq.Installer.nuproj"
				 Properties="$(CommonBuildProperties);IsSystemComponent=true"
				 Targets="Build;GetTargetPath">
			<Output ItemName='InstallerPackage' TaskParameter='TargetOutputs' />
		</MSBuild>
		
		<Copy SourceFiles='%(InstallerPackage.Identity)' DestinationFiles='$(Out)\%(InstallerPackage.Filename)%(InstallerPackage.Extension)' />
	</Target>

	<Target Name="BuildPackages" Inputs="@(NuSpec)" Outputs="%(NuSpec.Identity)--BATCH"
			Condition="'@(NuSpec)' != ''">

		<!-- If there is a .csproj, grab the version from the project itself -->
		<MSBuild Projects='%(NuSpec.RootDir)%(NuSpec.Directory)%(Filename).csproj' Condition="Exists('%(NuSpec.RootDir)%(NuSpec.Directory)%(Filename).csproj')"
				 Targets='GitVersion' Properties='GitInfoBaseDir=%(NuSpec.RootDir)%(NuSpec.Directory)'>
			<Output ItemName='GitVersion' TaskParameter='TargetOutputs'/>
		</MSBuild>

		<MSBuild Projects='$(PackagesPath)\GitInfo\build\GitInfo.targets'
				 Condition="!Exists('%(NuSpec.RootDir)%(NuSpec.Directory)%(Filename).csproj')"
				 Targets='GitVersion' Properties='GitInfoBaseDir=%(NuSpec.RootDir)%(NuSpec.Directory)'>
			<Output ItemName='GitVersion' TaskParameter='TargetOutputs'/>
		</MSBuild>

		<PropertyGroup>
			<Version>%(GitVersion.GitSemVerMajor).%(GitVersion.GitSemVerMinor).%(GitVersion.GitSemVerPatch)%(GitVersion.GitSemVerDashLabel)</Version>
			<IncludePreRelease>false</IncludePreRelease>
			<IncludePreRelease Condition=" '%(GitVersion.GitSemVerLabel)' != '' ">true</IncludePreRelease>
		</PropertyGroup>

		<Message Text="Determined version $(Version) for @(NuSpec)" Importance="high"/>
		<Exec Command='"$(NuGet)" Pack "@(NuSpec)" -Version $(Version) -Properties Id=%(NuSpec.Filename);Configuration=$(Configuration);Version=$(Version) -OutputDirectory $(Out)' />
	</Target>

	<Import Project="$(PackagesPath)\MSBuilder.CodeTaskAssembly\build\MSBuilder.CodeTaskAssembly.props"
			Condition=" Exists('$(PackagesPath)\MSBuilder.CodeTaskAssembly\build\MSBuilder.CodeTaskAssembly.props') " />
	<Import Project="$(PackagesPath)\MSBuilder.DumpItems\build\MSBuilder.DumpItems.targets"
			Condition=" Exists('$(PackagesPath)\MSBuilder.DumpItems\build\MSBuilder.DumpItems.targets') "/>
	<Import Project="$(PackagesPath)\MSBuilder.IsAdministrator\build\MSBuilder.IsAdministrator.targets" 
			Condition=" Exists('$(PackagesPath)\MSBuilder.IsAdministrator\build\MSBuilder.IsAdministrator.targets') "/>
	<Import Project="$(PackagesPath)\MSBuilder.VsixInstaller\build\MSBuilder.VsixInstaller.targets"
			Condition=" Exists('$(PackagesPath)\MSBuilder.VsixInstaller\build\MSBuilder.VsixInstaller.targets') And '$(IntegrationTest)' == 'true' " />

	<PropertyGroup>
		<TestDependsOn>PrepareTest;TestWin;TestMac</TestDependsOn>
		<TestDependsOn Condition=" '$(IntegrationTest)' == 'true' ">
			PrepareInstall;
			Install;
			$(TestDependsOn);
			Uninstall
		</TestDependsOn>
	</PropertyGroup>

	<Target Name="Test" DependsOnTargets="$(TestDependsOn)" />

	<Target Name="PrepareInstall" DependsOnTargets="IsAdministrator">
		<ItemGroup>
			<SupportedVersion Include="11.0;12.0;14.0;15.0;16.0" />
			<SupportedVersion>
				<InstallDir>$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\%(Identity)', 'InstallDir', null, RegistryView.Registry32))</InstallDir>
			</SupportedVersion>
			<SupportedVersion>
				<SdkDir>$([System.IO.Path]::GetFullPath('%(InstallDir)..\..\VSSDK\VisualStudioIntegration\'))</SdkDir>
			</SupportedVersion>
			<InstalledVersion Include="@(SupportedVersion)" Condition=" Exists('%(SdkDir)') " />		
		</ItemGroup>

		<Message Importance="$(DefaultImportance)" Text="Found Visual Studio versions with required VSSDK installed: @(InstalledVersion)." />

		<PropertyGroup>
			<PS>%WINDIR%\System32\WindowsPowerShell\v1.0\powershell.exe</PS>
		</PropertyGroup>

		<!-- Existing versions of Xamarin will collide with the provided IAsyncManager export, even from the normal hive -->
		<!-- NOTE: we could check the product version too if needed: Version is available from the Win32_Product structure -->
		<Exec Command="&quot;$(PS)&quot; -NoProfile -Command &quot;&amp; { get-wmiobject Win32_Product | Where-Object Name -eq Xamarin  | Select-Object -ExpandProperty IdentifyingNumber }&quot;"
			  ConsoleToMSBuild="true">
			<Output TaskParameter="ConsoleOutput" PropertyName="XamarinProductCode" />
		</Exec>

		<!-- TODO: eventually we will need to do this for the normal hive Merq installation itself instead :(
		     although if that comes as a VSIX, it may be simpler to achieve?
		-->
		<Error Condition=" '$(IsAdministrator)' == 'false' And '$(XamarinProductCode)' != '' "
			   Text="Existing Xamarin product installation found, but current user is not Administrator and can't uninstall it." />

		<Message Text="Found installed Xamarin product, uninstalling to avoid incompatibilities during integration test run..."
				 Condition=" '$(IsAdministrator)' == 'false' And '$(XamarinProductCode)' != '' "
				 Importance="$(DefaultImportance)" />

		<Exec Command='msiexec /x $(XamarinProductCode) /norestart /q | more'
			  Condition=" '$(XamarinProductCode)' != '' "
			  ConsoleToMSBuild="true" />

		<Exec Command='"%(InstalledVersion.SdkDir)Tools\Bin\CreateExpInstance.exe" /Reset /VSInstance=%(InstalledVersion.Identity) /RootSuffix=Exp | more'
			  Condition=" '$(ResetExperimental)' == 'true' And '$(IsAdministrator)' != 'true' "
			  ConsoleToMSBuild="true"/>

		<Exec Command='"%(InstalledVersion.InstallDir)devenv.exe" /Setup /RootSuffix=Exp | more'
			  Condition=" '$(ResetExperimental)' == 'true' And '$(IsAdministrator)' == 'true' "
			  ConsoleToMSBuild="true"/>		
	</Target>

	<Target Name="Install" Inputs="@(InstalledVersion)" Outputs="%(InstalledVersion.Identity)-BATCH"
			Condition=" Exists('$(Installer)') ">

		<Message Importance="$(DefaultImportance)" Text="Installing Merq to Visual Studio %(InstalledVersion.Identity)$(_RootSuffix)" />
		<InstallVsix VisualStudioVersion="@(InstalledVersion)"
					 VsixPath="$(Installer)"
					 RootSuffix="$(_RootSuffix)"
					 MessageImportance="$(DefaultImportance)" />

		<Message Importance="$(DefaultImportance)" Text="Flushing MEF cache for Visual Studio %(InstalledVersion.Identity)$(_RootSuffix)." />
		<Exec Command='rmdir "$(LocalAppData)\Microsoft\VisualStudio\%(InstalledVersion.Identity)$(_RootSuffix)\ComponentModelCache" /S /Q'
			  Condition=" Exists('$(LocalAppData)\Microsoft\VisualStudio\%(InstalledVersion.Identity)$(_RootSuffix)\ComponentModelCache') "/>
	</Target>

	<Target Name="Uninstall" Inputs="@(InstalledVersion)" Outputs="%(InstalledVersion.Identity)-BATCH">
		<Message Importance="$(DefaultImportance)" Text="Uninstalling Merq from Visual Studio %(InstalledVersion.Identity)$(_RootSuffix)" />
		<UninstallVsix VisualStudioVersion="%(InstalledVersion.Identity)"
					   VsixId="Merq"
					   RootSuffix="$(_RootSuffix)" 
					   MessageImportance="$(DefaultImportance)" />
	</Target>

	<Target Name="PrepareTest" DependsOnTargets="Build">
		<MSBuild Projects="@(TestProject)" BuildInParallel="false" Targets="GetTargetPath" Properties="$(CommonBuildProperties)">
			<Output TaskParameter="TargetOutputs" ItemName="_TestAssembly" />
		</MSBuild>
		<MSBuild Projects="@(IntegrationTestProject)" BuildInParallel="false" Targets="GetTargetPath" Properties="$(CommonBuildProperties)"
				 Condition=" '@(IntegrationTestProject)' != '' ">
			<Output TaskParameter="TargetOutputs" ItemName="_IntegrationTestAssembly" />
		</MSBuild>

		<ItemGroup>
			<TestAssembly Include="@(_TestAssembly)" Condition=" Exists('%(_TestAssembly.FullPath)') " />
			<IntegrationTestAssembly Include="@(_IntegrationTestAssembly)" Condition=" Exists('%(_IntegrationTestAssembly.FullPath)') " />
		</ItemGroup>

		<MakeDir Directories="$(Out)" Condition="!Exists('$(Out)')" />
	</Target>

	<Target Name="TestWin" DependsOnTargets="PrepareTest" Condition=" '$(OS)' == 'Windows_NT' ">
		<PropertyGroup>
			<XunitConsole>$(PackagesPath)\xunit.runner.console\tools\xunit.console.x86.exe</XunitConsole>
			<XunitOptions>$(XunitOptions) -html $(Out)\test.html -xml $(Out)\test.xml -parallel all -noshadow</XunitOptions>

			<CoverageConsole>$(PackagesPath)\OpenCover\tools\OpenCover.Console.exe</CoverageConsole>
			<CoverageOptions>$(CoverageOptions) -output:$(Out)\coverage.xml -returntargetcode -register:user -filter:"+[Merq.*]* -[xunit*]* -[*Tests]* -[*]*ThisAssembly* -[*]*IFluentInterface*" -excludebyattribute:*ExcludeFromCodeCoverage*;*CompilerGenerated* -skipautoprops -showunvisited -mergebyhash</CoverageOptions>
		</PropertyGroup>

		<Exec Command="$(CoverageConsole) $(CoverageOptions) -target:$(XunitConsole) -targetargs:&quot;@(TestAssembly, ' ') $(XunitOptions)&quot;"
			  ConsoleToMSBuild="true"
			  ContinueOnError="ErrorAndContinue" />

		<Exec Command="$(XunitConsole) @(IntegrationTestAssembly, ' ') $(XunitOptions.Replace('test', 'integrationtest'))"
			  Condition=" '@(IntegrationTestAssembly)' != '' "
			  ConsoleToMSBuild="true"
			  ContinueOnError="ErrorAndContinue" />
	</Target>

	<Target Name="TestMac" DependsOnTargets="PrepareTest" Condition=" '$(OS)' != 'Windows_NT' ">
		<xunit Assemblies="@(TestAssembly)"
			   Html="$(Out)\test.html"
			   Xml="$(Out)\test.xml"
			   ParallelizeAssemblies="true"
			   ParallelizeTestCollections="true"
			   ContinueOnError="ErrorAndContinue" />
	</Target>

	<UsingTask TaskName="CalculateMetaVersion" TaskFactory="CodeTaskFactory" AssemblyFile="$(CodeTaskAssembly)" Condition=" '$(CodeTaskAssembly)' != '' ">
		<ParameterGroup>
			<BaseVersion Required="true" />
			<PublishedVersion Required="true" />
			<TargetVersion Output="true"/>
		</ParameterGroup>
		<Task>
			<Code Type="Fragment" Language="cs">
				<![CDATA[
				var label = BaseVersion.IndexOf("-") == -1 ? 
					"" : BaseVersion.Substring(BaseVersion.IndexOf("-"));
				
				var baseVersion = new Version(BaseVersion.Replace("-pre", ""));
				var publishedVersion = new Version(PublishedVersion.Replace("-pre", ""));
				
				if (baseVersion > publishedVersion) 
				{
					TargetVersion = BaseVersion;
				}
				else 
				{
					TargetVersion = new Version(publishedVersion.Major, publishedVersion.Minor, publishedVersion.Build + 1).ToString() + label;
				}
			]]>
			</Code>
		</Task>
	</UsingTask>

	<!-- Configure and restore initial targets and packages -->
	<Import Project="src\NuGet.Restore.targets" />
	<PropertyGroup>
		<GitInfoTargets>$(PackagesPath)\GitInfo\build\GitInfo.targets</GitInfoTargets>
		<PendingRestore Condition=" !Exists('$(GitInfoTargets)') ">true</PendingRestore>
	</PropertyGroup>

	<Target Name="Configure" DependsOnTargets="DownloadNuGet">
		<!-- We always run NuGet Install since it already checks for already-installed packages and skips them -->
		<Exec Command='"$(NuGet)" Install "$(MSBuildThisFileDirectory)packages.config" -OutputDirectory "$(PackagesPath)" -ExcludeVersion -Verbosity quiet'
			  Condition=" '$(PendingRestore)' == 'true' " />

		<!-- Errors if nuget packages were restored during the build -->
		<Error Text="Required build-time NuGet packages were missing and were just restored. Please run the build again."
			   Condition=" '$(PendingRestore)' == 'true' And '$(target)' != 'configure' "/>
	</Target>
</Project>
